//    _____                                             _
//   |_   _|   _ _ __   ___  ___   __ _ _ __ __ _ _ __ | |__  _   _
//     | || | | | '_ \ / _ \/ _ \ / _` | '__/ _` | '_ \| '_ \| | | |
//     | || |_| | |_) |  __/ (_) | (_| | | | (_| | |_) | | | | |_| |
//     |_| \__, | .__/ \___|\___/ \__, |_|  \__,_| .__/|_| |_|\__, |
//         |___/|_|               |___/          |_|          |___/
////////////////////////////////////////////////////////////////////////////////////////////////////////

// sass-lint:disable property-sort-order

// -----------------------------------------------------------------------------------------------------
// Dependencies
@import './helper.mod';
@import './colors.mod';

// -----------------------------------------------------------------------------------------------------
/// Contains the values of font weights.
/// @type map
/// @group util_type
$font-weight: (
  'regular': 400,
  'bold': 600
);

// -----------------------------------------------------------------------------------------------------
/// Looks for a standard font weight by it's name.
/// @param {string} $weight ['regular'] - The name of a particular font weight, it must be an index of the $font-weight map.
/// @example scss - Sass
///   p {
///     font-weight: font-weight('regular');
///   }
/// @example css - Compiled CSS
///   p {
///     font-weight: 400;
///   }
/// @group util_type
@function font-weight($weight: 'regular') {
  @if (map-has-key($font-weight, $weight)) {
    @return map-get($font-weight, $weight);
  } @else {
    @return throw(
      'The font weight named "#{$weight}" was not found.',
      indexing
    );
  }
}

// -----------------------------------------------------------------------------------------------------
/// Contains the values of font size.
/// @type map
/// @group util_type
$font-size: (
  'small': 8px,
  'label': 12px,
  'paragraph': 14px,
  'subheading': 18px,
  'heading': 27px,
  'title': 40.5px,
  'display': 60.75px
);

// -----------------------------------------------------------------------------------------------------
/// Looks for a standard font size by it's name.
/// @param {string} $size ['label'] - The name of a particular font size, it must be an index of the $font-size map.
/// @example scss - Sass
///   p {
///     font-size: font-size('label');
///   }
/// @example css - Compiled CSS
///   p {
///     font-size: 12px;
///   }
/// @group util_type
@function font-size($size: 'label') {
  @if (map-has-key($font-size, $size)) {
    @return map-get($font-size, $size);
  } @else {
    @return throw('The font size named "#{$size}" was not found.', indexing);
  }
}

// -----------------------------------------------------------------------------------------------------
/// Contains the values of line height.
/// @type map
/// @group util_type
$line-height: (
  'small': 12px,
  'paragraph': 16px,
  'label': 16px,
  'subheading': 24px,
  'heading': 36px,
  'title': 48px,
  'display': 84px
);

// -----------------------------------------------------------------------------------------------------
/// Looks for a standard line height by it's name.
/// @param {string} $height ['label'] - The name of a particular line height, it must be an index of the $line-height map.
/// @example scss - Sass
///   p {
///     line-height: line-height('label');
///   }
/// @example css - Compiled CSS
///   p {
///     line-height: 16px;
///   }
/// @group util_type
@function line-height($height: 'label') {
  @if (map-has-key($line-height, $height)) {
    @return map-get($line-height, $height);
  } @else {
    @return throw(
      'The line height named "#{$height}" was not found.',
      indexing
    );
  }
}

// -----------------------------------------------------------------------------------------------------
/// A Title is the largest heading of the three heading types, the other two being the Heading and Subheading. It is conventionally used for page title and only one can be found, usually at the top of the page.
/// @param {number} lines [1]
/// @param {number} height [auto]
/// @param {boolean} minMax [false]
/// @param {boolean} breakWord [true]
/// @output 
/// @example scss - Sass
///   h1 {
///     @include clamp;
///   }
/// @example css - Compiled CSS
///   h1 {
///     
///   }
/// @group util_type
@mixin clamp(
  $lines: 1,
  $height: auto,
  $minMax: false,
  $breakWord: true,
  $whiteSpace: false
) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  text-overflow: ellipsis;
  overflow: hidden;
  height: $height;

  @if $breakWord {
    overflow-wrap: break-word;
  }

  @if $whiteSpace {
    white-space: pre;
  }

  @if $minMax {
    max-height: $height;
    min-height: $height;
  }
}
